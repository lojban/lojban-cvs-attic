################################################################################
$Header$
################################################################################

First : The author can be reached at  :         rpc@myself.com

Second : My web-page for jbofihe is
           http://www.rrbcurnow.freeuk.com/jbofihe
        or http://go.to/jbofihe
         
         My page for Lojban-related things generally is :
           http://www.rrbcurnow.freeuk.com/lojban

================
WHAT IS JBOFIHE?
================

jbofihe is a command-line driven program with the following functions :

- checking grammatical correctness of Lojban text
- displaying successfully analysed text with nesting of grammatical constructs
  shown (either inline or as a tree)
- displaying approximate word-for-word English translations of the Lojban
  words, with some limited 'part-of-speech' adjustment of the English forms.
- showing which sumti fill each of the places of each selbri

Bundled with jbofihe are 3 other programs :

- cmafihe is a cut-down jbofihe which has no grammar checking (so it's
  particularly useful for getting an initial word look-up on badly formed
  texts)
- smujajgau builds the pre-sorted binary format Lojban->English word database
  that jbofihe and cmafihe use
- jvocuhadju determines the optimal lujvo for a given tanru input to it as
  command line arguments.

=========
COMPILING
=========

You need the following tools/libraries installed to have a hope of
building the software :

- bison (yacc probably OK, edit the makefile)
- flex (lex probably OK, ditto)
- an ANSI C compiler (gcc recommended)
- perl
- make (GNU make recommended)

I would guess a Unix (or maybe Win32) system is probably necessary, as
I've hardly tried to be economical with the memory footprint.  I'd be
quite surprised if this builds/runs on a bare DOS system.  It was
developed on Linux on a 486/120 with 32Mb of RAM.

The following tools are recommended but not essential
- LaTeX (to format the highest quality outputs from the s/w)
- a web browser (to display the intermediate quality output)

Download the wordlists (gismu, cmavo, lujvo-list etc) separately from
ftp://xiron.pc.helsinki.fi/pub/lojban/wordlists.

The file sizes in bytes of the versions I'm using are as follows

 808959 NORALUJV.txt
 143391 cmavo
 365437 gismu
 292281 lujvo-list
  75751 oblique.key
  49440 rafsi

and their md5 checksums are

d750de398740a2ba701422a466ddbeab  NORALUJV.txt
4f3bf721f48239b85ab634f159f5557a  cmavo
859ea58317c0d3811dadaaceb3e0e4ce  gismu
dbd82f42f4156a2a1801e2a5ec1e551e  lujvo-list
51cdabc666f3f1ffc0f17c1acea148bc  oblique.key
b783880c04efe799ec2c07724871c373  rafsi

It's best if these are in the build directory or a 'sibling' of it,
although config.pl will find them anywhere in your directory tree
otherwise.

The build sequence looks like this (assuming you want to install under
/usr/local)

perl config.pl --prefix=/usr/local
make all
make install

The config.pl script takes these additional (optional) arguments :
--debug to compile with debug instead of optimisation
--installprog=<name> to specify an alternative installation program.
--wordsdir=<name> to specify the directory containing the 
                  files gismu, cmavo, rafsi etc.
--nommap to use fread() rather than mmap() to access the dictionary
                  (use this on non-Posix systems)

=======
RUNNING
=======

If your compiled dictionary is not in the default location (i.e. you are not
installing properly or want to use a private local dictionary), set the
JBOFIHE_DICTIONARY environment variable to where you have installed
smujmaji.dat

The command line is documented in the manual pages.  Some brief examples follow :

Suppose your Lojban text is in the file sample.txt, containing

  mi klama le zarci

jbofihe -x -b sample.txt gives :
    [ ( mi                )            << klama  >> ( le                      
    [ ( I, me             ) [is, does] << go-ing >> ( the                     
    [ ( klama1 (go-er(s)) )            <<        >> ( klama2 (destination(s)) 
    1 2                   2            3         3  4                         

    zarci            ) ] 
    trading place(s) ) ] 
                     ) ] 
                     4 1 

jbofihe -k sample.txt gives :
    Token list before preprocessing

    CMV : mi [me]
    BRV : klama
    CMV : le [the described]
    BRV : zarci

    ------------------------------
    Token list after preprocessing

    CMV : mi [me]
    BRV : klama
    CMV : le [the described]
    BRV : zarci

    (0[mi {klama <le zarci>}])0

jbofihe -t sample.txt gives :
    | +-CMAVO : mi
    | | +-BRIVLA : klama
    | | | +-CMAVO : le
    | | | +-BRIVLA : zarci
    | | +-SUMTI_6
    | +-BRIDI_TAIL_3
    +-NO_CU_SENTENCE
    CHUNKS

cmafihe sample.txt gives :
    mi <KOhA3> [I, me] klama <BRIVLA> [come] le <LE> [the] zarci <BRIVLA> [market]

cmafihe -b sample.txt gives :
    mi    klama  le  zarci  
    KOhA3 BRIVLA LE  BRIVLA 
    I, me come   the market 

'jvocuhadju gerku zdani' gives :
    Possible rafsi for input words :
    ger ge'u 
    zda 
    --------------------
     Score  Lujvo
    --------------------
      5878 gerzda
      6367 ge'uzda


===
FAQ
===

1. Why is it called 'jbofihe' (i.e. jbofi'e = Lojbanic fish)?

The name is modelled on 'Babelfish', the Altavista translation page on
the WWW.  Sorry, my creativity was limited at the time.
