################################################################################
$Header$
################################################################################

This file needs a lot of detail adding, it is a skeleton set of
instructions for now.

The author can be reached at richard@rrbcurnow.freeserve.co.uk

COMPILING

You need the following tools/libraries installed to have a hope of
building the software :

- bison (yacc probably OK, edit the makefile)
- flex (lex probably OK, ditto)
- an ANSI C compiler (gcc recommended)
- perl
- gdbm
- make (GNU make recommended)

I would guess a Unix (or maybe Win32) system is probably necessary, as
I've hardly tried to be economical with the memory footprint.  I'd be
quite surprised if this builds/runs on a bare DOS system.  It was
developed on Linux on a 486/120 with 32Mb of RAM.

The following tools are recommended but not essential
- LaTeX (to format the highest quality outputs from the s/w)
- a web browser (to display the intermediate quality output)

Download the wordlists (gismu, cmavo, lujvo-list etc) separately from
ftp://xiron.pc.helsinki.fi/pub/lojban/wordlists.  It's best if these
are in the build directory or a 'sibling' of it, although config.pl
will find them anywhere in your directory tree otherwise.

Run 'perl config.pl' then 'make dictionary' then 'make'.

Manually copy jbofihe, dictmake, dictclean and dictionary.dbm to their
final location.

RUNNING

Set the JBOFIHE_DICTIONARY environment variable to where you have
installed dictionary.dbm, unless it's in the current directory where
you running jbofihe.

The command line arguments are
-d : show debug output
-k : show token lists
-g : do glossing on tree output mode (superceded by -x in 
     all honesty - this was a first attempt)
-t : show parse tree, stripped down to nodes with >1 children
-tf : show parse tree without stripping down (huge volume of output)
-l : generate LaTeX output to stdout
-b : generate LaTeX output in 'blocked' mode
-x : generate text output to stdout
-h : generate HTML output to stdout

The lojban text to be parsed/glossed is supplied on stdin, e.g. if
you've a file called sample

./jbofihe -l -b < sample > sample.tex
latex sample.tex
xdvi sample.dvi

To run dictmake, the arguments are

dictmake dictionary.dbm dict1 dict2...

(see makefile for examples).  The entries are of the form

lojban:english
or
lojban:english:comment

Where lojban is followed by a digit it means an 'xn' places of the
gismu, lujvo etc.  Where the digit is followed by one of n, v, a or t,
it means in the context of a noun, verb, adjective or case tag.  See
comments in translate.c for help.  Where the English contains a '*',
it is the 'active point' where endings such as plurals, -er, -ing etc
go.  Some of the cmavo, particularly tenses and connectives, have
special handling.  Documentation still to be written!

FAQ

1. Why is it called 'jbofihe' (i.e. jbofi'e = Lojbanic fish)?

The name is modelled on 'Babelfish', the Altavista translation page on
the WWW.  Sorry, I couldn't come up with anything more creative for
now.
